<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="LoggingCommon.t4" once="true" #>
using System;
using Cysharp.Text;

namespace Radish.Logging
{
	internal sealed class RadishLogger : ILogger
	{
		public string Name { get; }

		internal RadishLogger(string name)
		{
			Name = name;
		}

		#region Static Write Methods

		private static void Write(LogLevel level, string category, string message)
		{
			foreach (var writer in LogManager.RegisteredLoggers)
			{
				writer.Write(level, category, message.AsSpan());
			}
		}

		private static void WriteException(LogLevel level, string category, Exception ex)
		{
			using var fmt = ZString.CreateStringBuilder();
			fmt.Append(ex);
			var span = fmt.AsSpan();
			foreach (var writer in LogManager.RegisteredLoggers)
			{
				writer.Write(level, category, span);
			}
		}

		private static void WriteException(LogLevel level, string category, Exception ex, string message)
		{
			using var fmt = ZString.CreateStringBuilder();
			fmt.AppendLine(message);
			var span = fmt.AsSpan();
			foreach (var writer in LogManager.RegisteredLoggers)
			{
				writer.Write(level, category, span);
			}
		}

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		private static void Write<<#= CreateTypeArgument(i) #>>(LogLevel level, string category, string format, <#= CreateParameters(i) #>)
		{
			using var fmt = ZString.CreateStringBuilder();
			fmt.AppendFormat(format, <#= CreateParameterNames(i) #>);
			var span = fmt.AsSpan();
			foreach (var writer in LogManager.RegisteredLoggers)
			{
				writer.Write(level, category, span);
			}
		}

		private static void WriteException<<#= CreateTypeArgument(i) #>>(LogLevel level, string category, Exception ex, string format, <#= CreateParameters(i) #>)
		{
			using var fmt = ZString.CreateStringBuilder();
			fmt.AppendFormat(format, <#= CreateParameterNames(i) #>);
			fmt.Append(' ');
			fmt.Append(ex);
			var span = fmt.AsSpan();
			foreach (var writer in LogManager.RegisteredLoggers)
			{
				writer.Write(level, category, span);
			}
		}

	<# } #>
		#endregion

        #region Debug (Interface)

		public void Debug(string message)
			=> Write(LogLevel.Debug, Name, message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		public void Debug<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
			=> Write(LogLevel.Debug, Name, format, <#= CreateParameterNames(i) #>);

	<# } #>
		#endregion

		#region Info (Interface)

		public void Info(string message)
			=> Write(LogLevel.Info, Name, message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		public void Info<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
			=> Write(LogLevel.Info, Name, format, <#= CreateParameterNames(i) #>);

	<# } #>
		#endregion

		#region Warning (Interface)

		public void Warn(string message)
			=> Write(LogLevel.Warning, Name, message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		public void Warn<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
			=> Write(LogLevel.Warning, Name, format, <#= CreateParameterNames(i) #>);

	<# } #>
		#endregion

		#region Error (Interface)

		public void Error(string message)
			=> Write(LogLevel.Error, Name, message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		public void Error<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
			=> Write(LogLevel.Error, Name, format, <#= CreateParameterNames(i) #>);

	<# } #>
		#endregion

		#region Warning (Exception)

		public void Exception(Exception ex)
			=> WriteException(LogLevel.Exception, Name, ex);

		public void Exception(Exception ex, string message)
			=> WriteException(LogLevel.Exception, Name, ex, message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		public void Exception<<#= CreateTypeArgument(i) #>>(Exception ex, string format, <#= CreateParameters(i) #>) 
			=> WriteException(LogLevel.Exception, Name, ex, format, <#= CreateParameterNames(i) #>);

	<# } #>
		#endregion
	}
}