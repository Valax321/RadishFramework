<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="LoggingCommon.t4" once="true" #>
using System;
using JetBrains.Annotations;

namespace Radish.Logging
{
	/// <summary>
	/// Interface for logging implementations.
	/// </summary>
	public interface ILogger
	{
        #region Debug

		void Debug(string message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		[StringFormatMethod("format")]
		void Debug<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>);

	<# } #>
		#endregion

		#region Info

		void Info(string message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		[StringFormatMethod("format")]
		void Info<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>);

	<# } #>
		#endregion

		#region Warning

		void Warn(string message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		[StringFormatMethod("format")]
		void Warn<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>);

	<# } #>
		#endregion

		#region Error

		void Error(string message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		[StringFormatMethod("format")]
		void Error<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>);

	<# } #>
		#endregion

		#region Exception

		void Exception(Exception ex);

		void Exception(Exception ex, string message);

	<# for(var i = 1; i <= TypeParamMax; i++) { #>
		[StringFormatMethod("format")]
		void Exception<<#= CreateTypeArgument(i) #>>(Exception ex, string format, <#= CreateParameters(i) #>);

	<# } #>

		#endregion
	}
}
