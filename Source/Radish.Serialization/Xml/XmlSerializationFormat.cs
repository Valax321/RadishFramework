using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace Radish.Serialization.Xml;

internal sealed class XmlSerializationFormat : SerializerBase<XElement, XDocument>, ISerializationFormat
{
    private static readonly XmlSerializationFormat Default = new();
    
    public static void Serialize<[DynamicallyAccessedMembers(Serializer.RequiredMembers)] T>(T obj, Stream outputStream)
    {
        ArgumentNullException.ThrowIfNull(obj);
        Default.Serialize(typeof(T), obj, outputStream);
    }

    public static T Deserialize<[DynamicallyAccessedMembers(Serializer.RequiredMembers)] T>(Stream inputStream)
    {
        throw new NotImplementedException();
    }

    protected override void WriteNodeForValue(string propertyName, MemberInfo info, object? value, XElement parent)
    {
        var memberType = info switch
        {
            FieldInfo f => f.FieldType,
            PropertyInfo p => p.PropertyType,
            _ => throw new InvalidOperationException("Cannot determine member type")
        };

        if (XmlSerializerRegistry.TypeSerializers.TryGetValue(memberType, out var serializer))
        {
            serializer.SerializeInternal(parent, info.Name, value);
        }
        else if (memberType.GetCustomAttribute<SerializableAttribute>() != null)
        {
#pragma warning disable IL2072
            WriteClassValue(memberType, value, parent);
#pragma warning restore IL2072
        }
        else
        {
            throw new SerializationException(
                $"Could not serialize {memberType.FullName} \"{info.Name}\" of type {info.DeclaringType?.FullName}");
        }
    }

    protected override void CreateDocument(Type rootObjectType, out XDocument outDocument, out XElement outRootNode)
    {
        Debug.Assert(rootObjectType.FullName is not null);

        var version = Assembly.GetExecutingAssembly().GetName().Version;
        
        outRootNode = new XElement(rootObjectType.FullName);
        outDocument = new XDocument(
            new XComment($"Generated by Radish.Serialization v{version?.ToString()}. Edits may be lost!"),
            new XDocumentType(rootObjectType.FullName, null, null, null), 
            outRootNode);
    }

    protected override void WriteToStream(XDocument document, Stream destination)
    {
        using var writer = new XmlTextWriter(destination, Encoding.UTF8);
        document.WriteTo(writer);
    }
}